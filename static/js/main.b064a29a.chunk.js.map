{"version":3,"sources":["vendor/media/image/loading.gif","components/antd/LoadingPage.jsx","routes/pathName.js","routes/index.js","views/pages/PageNotFound.jsx","layouts/PublicRoute.jsx","layouts/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","LoadingPage","icon","src","LoadingGif","alt","title","extra","base","pagetest","notfound","pathName","routes","path","component","React","lazy","exact","PageNotFound","props","console","log","status","subTitle","PublicRoute","restricted","pathname","useLocation","routePath","map","x","route","idx","key","name","render","includes","Suspense","fallback","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,qC,qLCe5BC,EAVK,WAClB,OACE,kBAAC,IAAD,CACEC,KAAM,yBAAKC,IAAKC,IAAYC,IAAI,cAChCC,MAAM,GACNC,MAAM,M,QCTG,GACbC,KAFqB,cAGrBC,SAAS,GAAD,OAHa,cAGb,UACRC,SAAU,cCDLD,EACHE,EADGF,SAQQG,EALA,CACb,CAAEC,KAHAF,EADFH,KAIcM,UAAWC,IAAMC,MAAK,kBAAM,uDAA4BC,OAAQ,GAC9E,CAAEJ,KAAMJ,EAAUK,UAAWC,IAAMC,MAAK,kBAAM,uDAAiCC,OAAQ,ICO1EC,EAZM,SAACC,GAEpB,OADAC,QAAQC,IAAIF,GAEV,kBAAC,IAAD,CACEG,OAAO,MACPhB,MAAM,MACNiB,SAAS,0CACThB,MAAM,MCiBGiB,EAtBK,SAAC,GAA2B,EAAzBC,WAAyB,8BAAC,IACvCC,EAAaC,cAAbD,SACFE,EAAYhB,EAAOiB,KAAI,SAAAC,GAAC,OAAIA,EAAEjB,QAGpC,OAAQ,oCACLD,EAAOiB,KAAI,SAACE,EAAMC,GACjB,OAAQ,oCACR,kBAAC,IAAD,CACEC,IAAKD,EACLnB,KAAMkB,EAAMlB,KACZI,MAAOc,EAAMd,MACbiB,KAAMH,EAAMG,KACZC,OAAQ,SAAAhB,GAAK,OAAI,kBAACY,EAAMjB,UAAcK,WAK1CS,EAAUQ,SAASV,IAAa,kBAAC,IAAD,CAAOb,KAAK,IAAII,OAAO,EAAMH,UAAWI,MClB7D,WAACC,GACd,OACA,kBAAC,IAAD,KACE,kBAAC,IAAMkB,SAAP,CAAgBC,SAAU,kBAAC,EAAD,OACxB,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAab,YAAY,QCEbc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OACL,kBAAC,EAAD,MACFU,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.b064a29a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.06a9885f.gif\";","import React from 'react';\r\n// import LoadingSpin from './LoadingSpin';\r\nimport LoadingGif from '../../vendor/media/image/loading.gif';\r\nimport { Result } from 'antd';\r\n\r\nconst LoadingPage = () => {\r\n  return (\r\n    <Result\r\n      icon={<img src={LoadingGif} alt=\"gambargif\" />}\r\n      title=\"\"\r\n      extra=\"\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default LoadingPage;","export const baseURL = '/base-repos';\r\nexport default {\r\n  base: baseURL,\r\n  pagetest: `${baseURL}/page1`,\r\n  notfound: '/not-found',\r\n};","import React from 'react';\r\nimport pathName from './pathName';\r\nconst {\r\n  base,pagetest\r\n} = pathName;\r\n\r\nconst routes = [\r\n  { path: base, component: React.lazy(() => import('../views/pages/')), exact : true },\r\n  { path: pagetest, component: React.lazy(() => import('../views/pages/Page1')), exact : true },\r\n];\r\n\r\nexport default routes;","import React from 'react';\r\nimport { Result } from 'antd';\r\n\r\nconst PageNotFound = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <Result\r\n      status=\"404\"\r\n      title=\"404\"\r\n      subTitle=\"Maaf, Halaman yang Anda cari tidak ada.\"\r\n      extra=\"\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default PageNotFound;","import React from 'react';\r\nimport { Route, useLocation } from 'react-router-dom';\r\nimport routes from '../routes';\r\nimport PageNotFound from '../views/pages/PageNotFound';\r\n\r\nconst PublicRoute = ({ restricted, ...rest}) => {\r\n  const { pathname } = useLocation();\r\n  const routePath = routes.map(x => x.path);\r\n    // restricted = false meaning public route\r\n    // restricted = true meaning restricted route\r\n  return (<>\r\n    {routes.map((route,idx) => {\r\n      return (<>\r\n      <Route \r\n        key={idx}\r\n        path={route.path}\r\n        exact={route.exact}\r\n        name={route.name} \r\n        render={props => <route.component {...props} />}\r\n      />\r\n      </>)\r\n      })\r\n    }\r\n  {!routePath.includes(pathname) && <Route path='*' exact={true} component={PageNotFound} />}\r\n  </>);\r\n};\r\n\r\nexport default PublicRoute;","import React from 'react';\r\nimport { BrowserRouter, Switch } from 'react-router-dom';\r\nimport LoadingPage from \"../components/antd/LoadingPage\";\r\nimport PublicRoute from './PublicRoute';\r\n\r\nexport default (props) => {\r\n  return(\r\n  <BrowserRouter>\r\n    <React.Suspense fallback={<LoadingPage/>}>\r\n      <Switch>\r\n        <PublicRoute restricted={false} />\r\n        {/* <PublicRoute restricted={true} component={SignIn} path=\"/signin\" exact />\r\n        <PrivateRoute component={Dashboard} path=\"/dashboard\" exact /> */}\r\n      </Switch>\r\n    </React.Suspense>\r\n  </BrowserRouter>\r\n  );\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './layouts';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}